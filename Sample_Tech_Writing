Technical Report: Code Implementation and Evaluation for SVM-Based Cell Classification

1. Introduction

This report provides a detailed explanation of the code implementation and evaluation process for developing an SVM-based diagnostic tool for identifying benign and malignant cells. It covers code structure, technologies used, key functionalities, and results, accompanied by relevant code snippets, data visualizations, and tables.

2. Code Structure and Technologies

Libraries:

pandas: Data manipulation and analysis
numpy: Numerical computations
sklearn: Machine learning algorithms (SVM, train_test_split, etc.)
matplotlib.pyplot: Data visualization
Key Functions:

preprocessing(cell_df): Handling missing values, converting data types, scaling features
train_test_split(X, y, test_size, random_state): Dividing data into training and testing sets
create_svm(kernel): Creating an SVM model with specified kernel
evaluate_model(clf, X_test, y_test): Calculating accuracy, precision, recall, and generating a confusion matrix
plot_confusion_matrix(cm, classes, normalize): Visualizing the confusion matrix
3. Data Loading and Preprocessing

Python
import pandas as pd
import numpy as np

# Load the dataset
cell_df = pd.read_csv("cell_samples.csv")

# Preprocessing (snippet)
cell_df = cell_df[pd.to_numeric(cell_df['BareNuc'], errors='coerce').notnull()]
cell_df['BareNuc'] = cell_df['BareNuc'].astype('int')
Use code with caution. Learn more
4. Feature and Target Selection

Python
feature_df = cell_df[['Clump', 'UnifSize', 'UnifShape', 'MargAdh', 'SingEpiSize', 'BareNuc', 'BlandChrom', 'NormNucl', 'Mit']]
X = np.asarray(feature_df)
y = np.asarray(cell_df['Class'])
Use code with caution. Learn more
5. Train-Test Split

Python
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)
Use code with caution. Learn more
6. SVM Model Creation and Training

Python
from sklearn import svm

# RBF kernel SVM
clf = svm.SVC(kernel='rbf')
clf.fit(X_train, y_train)
Use code with caution. Learn more
7. Model Evaluation

Python
from sklearn.metrics import classification_report, confusion_matrix

yhat = clf.predict(X_test)
print(classification_report(y_test, yhat))

# Confusion matrix
cnf_matrix = confusion_matrix(y_test, yhat, labels=[2, 4])

# Visualization
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=['Benign(2)', 'Malignant(4)'], normalize=False, title='Confusion matrix')
plt.show()
Use code with caution. Learn more
8. Results

Accuracy: 96%
Precision:
Benign: 1.00
Malignant: 0.90
Recall: 1.00 (both classes)
Confusion Matrix: [[85, 5] [0, 47]]
9. Conclusion

The code successfully implements an SVM model for cell classification. Key technologies used include pandas, numpy, sklearn, and matplotlib. The model achieves high accuracy and perfect recall for malignant cases, 
demonstrating its potential for clinical applications. Further investigation into reducing false positives and addressing class imbalance is recommended for future work.
